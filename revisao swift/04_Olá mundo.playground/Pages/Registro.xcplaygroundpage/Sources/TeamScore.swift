import Foundation

public struct Score {

    fileprivate var teamScore = 0
    private var cheatingAttempts: Int = 0 {
        didSet {
            if cheatingAttempts > maximumCheatingTolerance {
                print("*************\n** AI NÃƒO **\n*************\nVocÃª jÃ¡ tentou usar \(cheatingAttempts) pontuaÃ§Ãµes ilegais. EstÃ¡ querendo trapacear? ðŸ˜§ \n(Experimente escolher uma destas pontuaÃ§Ãµes: \(legalPointValues).)")
            }
        }
    }

    private let maximumCheatingTolerance = 2

    private let legalPointValues = [1, 2, 3]

    private mutating func incrementCheatDetector() {
        cheatingAttempts = cheatingAttempts + 1
    }

    // TODO: Mudar isso para arremessos; estamos pedindo para as pessoas alterarem os nÃºmeros de boa-fÃ©. Talvez seja melhor usar um processamento de erros atualizado compatÃ­vel com linguagem Swift 
    public mutating func add(points: Int) {

        guard legalPointValues.contains(points) else 
            print("Aviso: no basquete, sÃ³ serÃ¡ possÃ­vel adicionar pontos legalmente se eles forem: \(legalPointValues). (VocÃª tentou \"\(points)\".)")
            incrementCheatDetector()
            return
        }

        teamScore += points
    }
}

extension Score: CustomStringConvertible {
    public var description : String {
        return "\(teamScore)"
    }
}

public var myTeamPoints = Score()

@discardableResult public func addToScore(_points: Int) -> Int {
    myTeamPoints.add(points: points)
    return myTeamPoints.teamScore
}
