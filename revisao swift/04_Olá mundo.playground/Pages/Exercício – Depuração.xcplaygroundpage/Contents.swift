/*:
 ## ExercÃ­cio â€“ DepuraÃ§Ã£o
 
 Ã€s vezes, Ã© necessÃ¡rio adicionar instruÃ§Ãµes `print` temporÃ¡rias para saber por que um programa nÃ£o estÃ¡ funcionando.
 
 Identificar problemas ou _bugs_ no cÃ³digo Ã© um dos usos mais comuns do console. Os programadores passam muito tempo lidando com cÃ³digos que ainda nÃ£o funcionam. Se tudo funcionasse como eles querem, nÃ£o seria necessÃ¡rio fazer revisÃµes.

 Neste exercÃ­cio, vocÃª vai depurar um cÃ³digo criado por outra pessoa. Boa sorte!
 
 - note:\
(Nota):\
O console deve estar visÃ­vel, e a barra de resultados, oculta. Mais adiante neste curso, vocÃª terÃ¡ vÃ¡rias oportunidades de depurar usando a barra lateral de resultados.

 
  - callout(Experiment: Pseudo-personalization):
(ExperiÃªncia: pseudopersonalizaÃ§Ã£o):\
Vamos supor que todos os seus amigos fizeram alguma coisa que deixou vocÃª chocado. EntÃ£o, vocÃª decidiu enviar uma mensagem personalizada expressando seus sentimentos a cada um deles. Para nÃ£o perder tempo escrevendo mensagens individuais, vocÃª criou um programa para gerÃ¡-las. Depois que ele estiver funcionando, vocÃª tem certeza de que basta alterar a variÃ¡vel `name` e depois copiar e colar sua reaÃ§Ã£o de choque pseudopersonalizada para cada um dos seus amigos. */
// -------------- ğŸ‘‡ O cÃ³digo que precisa ser corrigido estÃ¡ abaixo ğŸ‘‡ --------------------


let questionWord = "WHY"
let connectorWord = "but"
let question = "\(connectorWord) \(questionWord)?"

let incessantQuestion = "\(question)\(question)\(question)\(question)"

let name = "Kim"
let summons = "\(name) \(name). \(name)!"

let botheration = "\(summons)\(incessantQuestion)"


// -------------- ğŸ‘† O cÃ³digo que precisa ser corrigido estÃ¡ acima ğŸ‘† --------------------
//: Infelizmente, o programa tem um bug. Siga as instruÃ§Ãµes para encontrar e corrigir o erro!
// -------------- ğŸ‘‡ Coloque as instruÃ§Ãµes print abaixo desta linha ğŸ‘‡ --------------------

print (botheration)


/*:

 1. Imprima a constante `botheration` assim:
 ```
(Exemplo):
 print(botheration)
 ```

 O resultado ainda nÃ£o parece uma mensagem de texto tÃ­pica. A pontuaÃ§Ã£o estÃ¡ estranha, e algumas partes parecem cÃ³digos. Para corrigir esses problemas, vocÃª poderia analisar bem o cÃ³digo e fazer alteraÃ§Ãµes atÃ© o resultado final ficar bom, mas Ã© mais fÃ¡cil analisar algumas constantes intermediÃ¡rias.
 

 2. Adicione mais algumas instruÃ§Ãµes `print` para verificar as constantes intermediÃ¡rias, como `question`.
 3. Quando vocÃª tiver ideia de quais linhas provocaram os erros, comece a corrigi-las da primeira Ã  Ãºltima (se necessÃ¡rio, consulte o playground Strings). Continue conferindo o console para garantir que as constantes intermediÃ¡rias estejam corretas. Lembre-se de que vocÃª sempre pode fazer comentÃ¡rios ou excluir as instruÃ§Ãµes `print` que nÃ£o forem mais necessÃ¡rias.

 4. Quando a string final parecer escrita por uma pessoa e nÃ£o por um computador, ajuste as constantes para criar sua mensagem:
	* Altere as constantes string `questionWord`, `connectorWord` e `name` com valores diferente
	* Altere `question`, `incessantQuestion` e `summons` para combinar as outras constantes de formas diferentes. Fique Ã  vontade para usar mais repetiÃ§Ãµes, menos repetiÃ§Ãµes ou atÃ© inserir frases novas.
 
[Anterior](@previous)  |  pÃ¡gina 10 de 11  |  [Na sequÃªncia: ExercÃ­cio â€“ App Console](@next)
 */
