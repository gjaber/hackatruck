/*:
 ## Loops
 
 A linguagem Swift tem uma forma integrada de permitir a execu√ß√£o de c√≥digo para cada item de um vetor: s√£o os _loops_.
 
 √â como uma montanha-russa. A fila √© o vetor. O carrinho chega, a primeira pessoa da fila entra, passa pelo loop e sai. Depois, √© a vez da pr√≥xima pessoa da fila. üé¢
 
 Os loops pegam um item do vetor, executam c√≥digos usando esse item e passam para o pr√≥ximo item. 
 
 ![Imagem mostrando um loop de c√≥digo](loop.png)
 
 Quando o c√≥digo termina de passar por todos os itens da cole√ß√£o, o loop √© interrompido automaticamente, e o c√≥digo continua executando o resto do programa.
 
 Para executar c√≥digos para cada item de um vetor, voc√™ pode usar um loop _for‚Ä¶in_. Veja o vetor `friends` (amigos) processado por loop:
*/
let friends = ["Name", "Name2", "Name3", "Name4", "Name5"]

for friend in friends {
    let sparklyFriend = "‚ú®\(friend)‚ú®"
    print("Oi, \(sparklyFriend), venha √† minha festa na sexta!")
}
print("Pronto, todos os seus amigos foram convidados.")
//: A primeira linha define o loop com duas informa√ß√µes importantes:
//: 1. Em que cole√ß√£o trabalhar (nesse caso, `friends`).
//: 2. Como denominar o item que est√° sendo trabalhado (nesse caso, `friend`).
//: Em portugu√™s, poder√≠amos dizer: ‚ÄúA cada amigo da cole√ß√£o de amigos...‚Äù
//:
//: Todo o c√≥digo entre chaves √© o "corpo" do loop. √â a lista de etapas que ser√£o executadas para cada item da cole√ß√£o. Na primeira volta do loop, o valor de `friend` √© `Name`. Na segunda volta, o valor √© `Name2` e assim por diante at√© que a cole√ß√£o toda tenha passado pelo loop.
//: - experiment:\
//:(Experi√™ncia):\
//:A constante `friend` foi definida como parte do loop `for`. O que voc√™ acha que acontecer√° quando apagar as barras de coment√°rio da linha abaixo forem apagadas? O resultado ser√° o √∫ltimo nome usado pelo loop ou um erro?
//friend
//: A seguir, crie vetores que podem mudar.\
//: [Anterior](@previous)  |  p√°gina 7 de 17  |  [Na sequ√™ncia: Vetores mut√°veis](@next)
